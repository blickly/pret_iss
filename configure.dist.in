####################################################################
#Copyright (c) 2007-2008 The Regents of the University of California.
#All rights reserved.
#
#Permission is hereby granted, without written agreement and without
#license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
# $Author$
# $Date$
# $Id$
#####################################################################

#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.59)
AC_INIT(pret, 0.0.1, pret@chess.eecs)
AC_CONFIG_AUX_DIR([build-aux])
AC_CONFIG_SRCDIR([src/main.cpp])
AM_CONFIG_HEADER([config.h])
AM_INIT_AUTOMAKE

# Checks for programs.
AC_PROG_CXX
AC_PROG_CC
# Check for python
AM_PATH_PYTHON([2.3])

# Check for program "sed"
AC_CHECK_PROGS([SED],[sed],[:])
if test "$SED" = :; then
  AC_MSG_ERROR([Program sed is required to build. ])
fi

# Check for program "perl"
AC_CHECK_PROGS([PERL],[perl],[:])
if test "$PERL" = :; then
  AC_MSG_WARN([Program perl not found. Cannot run regression.])
fi

# Checks for libraries.

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([stdlib.h sys/time.h])
# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL
AC_C_CONST
AC_C_INLINE
AC_HEADER_TIME
AC_C_VOLATILE

# Check for RANLIB
 AC_PROG_RANLIB
# Check for INSTALL
AC_PROG_INSTALL

# Checks for library functions.
AC_CHECK_FUNCS([gettimeofday])

# Setup some environment flags
AC_SUBST(CXXFLAGS)
CXXFLAGS="-g -Wall -O3"
AC_SUBST(CFLAGS)
CFLAGS="${CFLAGS=}"
AC_SUBST(LDFLAGS)
LDFLAGS="${LDFLAGS=}"
AC_SUBST(LIBS)
LIBS="${LIBS=}"
AC_SUBST(TARGET_ARCH)
AC_SUBST(SYSTEMC_PATH)
AC_SUBST(PYMOD)

#AC_CONFIG_FILES([Makefile
#                 src/Makefile])

# Check the target so that we can appropriately add the suffix for SystemC
# Hack to get it to work under Darwin which does not support uname -o
CXX_COMP=`basename $CXX`
UNAME_MAC=`uname -s`
UNAME_TARGET=

if test "$UNAME_MAC" != "Darwin" -a "$UNAME_MAC" != "SunOS"
then
  UNAME_OS=`uname -o`
  UNAME_TARGET=`echo $UNAME_OS | sed 's/\(.*\)/\L\1/'`
else
  if test "$UNAME_MAC" = "SunOS"
  then
     UNAME_TARGET="sparc-sun-solaris"
  else
     UNAME_TARGET="linux"
  fi
#"powerpc-apple-macosx"
fi

case "$UNAME_TARGET" in
    powerpc-apple-macosx*)
        case "$CXX_COMP" in
            CC)
                EXTRA_CXXFLAGS=""
                DEBUG_CXXFLAGS="-g"
                OPT_CXXFLAGS="-O3"
                TARGET_ARCH="macosx"
		AR_TOOL="$CXX -xar -o"
        	CC="$CXX"
        	CFLAGS="$EXTRA_CXXFLAGS $OPT_CXXFLAGS"
                ;;
            c++ | g++)
                EXTRA_CXXFLAGS="-Wall"
                DEBUG_CXXFLAGS="-g"
                OPT_CXXFLAGS="-O3"
                TARGET_ARCH="macosx"
        	CC="$CXX"
        	CFLAGS="$EXTRA_CXXFLAGS $OPT_CXXFLAGS"
                ;;
            *)
                { { echo "$as_me:2730: error: \"sorry...compiler not supported\"" >&5
echo "$as_me: error: \"sorry...compiler not supported\"" >&2;}
   { (exit 1); exit 1; }; }
		;;
        esac
	AS=as
        QT_ARCH="powerpc-apple-macosx"
        ;;
    sparc-sun-solaris*) 
        case "$CXX_COMP" in
            CC)
                EXTRA_CXXFLAGS=""
                DEBUG_CXXFLAGS="-g"
                OPT_CXXFLAGS="-O3"
                TARGET_ARCH="sparcOS5"
		AR_TOOL="$CXX -xar -o"
        	CC="$CXX"
        	CFLAGS="$EXTRA_CXXFLAGS $OPT_CXXFLAGS"
                ;;
            c++ | g++)
                EXTRA_CXXFLAGS="-Wall"
                DEBUG_CXXFLAGS="-g"
                OPT_CXXFLAGS="-O3"
                TARGET_ARCH="gccsparcOS5"
        	CC="$CXX"
        	CFLAGS="$EXTRA_CXXFLAGS $OPT_CXXFLAGS"
                ;;
            *)
                AC_MSG_ERROR("sorry...compiler not supported")
		;;
        esac
	AS=as
        QT_ARCH="sparc-os2"
        ;;
    x86_64*linux*)
        case "$CXX_COMP" in
            c++ | g++)
                EXTRA_CXXFLAGS="-Wall"
                DEBUG_CXXFLAGS="-g"
                OPT_CXXFLAGS="-O3"
                TARGET_ARCH="linux64"
        	CC="$CXX"
        	CFLAGS="$EXTRA_CXXFLAGS $OPT_CXXFLAGS"
                ;;
            *)
                AC_MSG_ERROR("sorry...compiler not supported")
		;;
        esac
	AS=as
        QT_ARCH="x86_64"
        ;;
    *linux*)
        case "$CXX_COMP" in
            c++ | g++)
		PYMOD="libpretdbg.so"
                EXTRA_CXXFLAGS="-Wall"
                DEBUG_CXXFLAGS="-g"
                OPT_CXXFLAGS="-O3"
                TARGET_ARCH="linux"
        	CC="$CXX"
        	CFLAGS="$EXTRA_CXXFLAGS $OPT_CXXFLAGS"
                ;;
            *)
                AC_MSG_ERROR("sorry...compiler not supported")
		;;
        esac
	AS=as
        QT_ARCH="iX86"
        ;;
    *cygwin*)
        case "$CXX_COMP" in
            c++ | g++)
		PYMOD="libpretdbg.dll"
                EXTRA_CXXFLAGS="-Wall"
                DEBUG_CXXFLAGS="-g"
                OPT_CXXFLAGS="-O3"
                TARGET_ARCH="cygwin"
        	CC="$CXX"
        	CFLAGS="$EXTRA_CXXFLAGS $OPT_CXXFLAGS"
                ;;
            *)
                AC_MSG_ERROR("sorry...compiler not supported")
		;;
        esac
	AS=as
        QT_ARCH="iX86"
        ;;
    *hpux11*)
        case "$CXX_COMP" in
            aCC)
                EXTRA_CXXFLAGS="-AA -ext +DA2.0 +DS2.0"
                DEBUG_CXXFLAGS="-g"
                OPT_CXXFLAGS="+O1"
                TARGET_ARCH="hpux11"
        	CC="$CXX"
        	CFLAGS="$EXTRA_CXXFLAGS $OPT_CXXFLAGS -Wa,-w36"
                ;;
            c++ | g++)
                EXTRA_CXXFLAGS="-Wall"
                DEBUG_CXXFLAGS="-g"
                OPT_CXXFLAGS="-O3"
                TARGET_ARCH="gcchpux11"
        	CC="$CXX"
        	CFLAGS="$EXTRA_CXXFLAGS $OPT_CXXFLAGS"
                ;;
            *)
                AC_MSG_ERROR("sorry...compiler not supported")
		;;
        esac
	AS=/usr/ccs/bin/as
        QT_ARCH="hppa"
        ;;
    *)
        AC_MSG_ERROR("sorry...architecture not supported")
        ;;
esac
	
AC_ARG_ENABLE(debugger,
[  --enable-debugger    Compile debugger ],
[case "${enableval}" in
  yes) debugger=true ;;
  no)  debugger=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-debugger) ;;
esac],[debugger=false])
AM_CONDITIONAL(DEBUGGER, test x$debugger = xtrue)

AC_ARG_ENABLE(systemc,
[  --enable-systemc    Compile with SystemC ],
[case "${enableval}" in
  yes) systemc=true ;;
  no)  systemc=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-systemc) ;;
esac],[systemc=false])
AM_CONDITIONAL(USESYSTEMC, test x$systemc = xtrue)

AC_ARG_ENABLE(fpic,
[  --enable-fpic    Use position independent code (-fPIC) ],
[case "${enableval}" in
  yes) fpic=true ;;
  no)  fpic=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-fpic) ;;
esac],[fpic=false])
AM_CONDITIONAL(USEFPIC, test x$fpic = xtrue)

# Setup default prefix as current directory
test "x$prefix" = xNONE && prefix=$srcdir
current_dir=`pwd`; cd $prefix; prefix=`pwd`; cd $current_dir

# Setup the with argument for SystemC and Python PATH setup
SYSTEMC_FOUND="no"
PY_FOUND="no"
FAILED="no"

# Check if environment variables SYSTEMC and PRET_ISS are set.
SCVAR=`echo $SYSTEMC`
ISSVAR=`echo $PRET_ISS`

if test x$systemc = xtrue
then
  if test "$SCVAR" == "" 
  then
	AC_MSG_ERROR("Please set the environment variable SYSTEMC")
  fi
else
  CXXFLAGS="${CXXFLAGS=} -D_NO_SYSTEMC_"
fi
	
if test "$PRET_ISS" == "" 
then
  AC_MSG_ERROR("Please set the environment variable PRET_ISS")
fi


#AC_ARG_WITH(systemc, [  --with-systemc=PATH          PATH to SystemC])
LCPATH=`pwd`

if test x$systemc = xtrue
   then
if test "$SCVAR" != ""
then
  with_systemc=$SCVAR
  cd $with_systemc
  SYSTEMC_PATH=$with_systemc
  dnl See if there is a lib directory in $with_xerces
  if test -d $with_systemc/lib
  then
    cd $with_systemc
  fi

    for d in *;
    do
      dnl echo $d
      if test "libsystemc.a" && test -f $d
      then
        echo "Checking for libsystemc.a: found at $with_systemc"
        CXXFLAGS="$CXXFLAGS -I$with_systemc/include"
        CFLAGS="$CFLAGS -I$with_systemc/include"
	LDFLAGS="$LDFLAGS -L$with_systemc/lib-${TARGET_ARCH}"
        LIBS="$LDFLAGS -lsystemc"
        SYSTEMC_FOUND="yes"
        break
      fi
    done
  cd $LCPATH
else
dnl Check for libsystemc.so
 AC_CHECK_LIB(systemc, main, [LIBS="$LIBS"], [
   echo "Error: libsystemc.a is required. Please check $SYSTEMC environment variable path."
   FAILED="yes"
   ])
fi
fi
	
if test "$FAILED" == "no" 
then

AC_OUTPUT([Makefile
	   src/Makefile
	   src/core/Makefile
	   src/debugger/Makefile
	   scripts/Makefile ])
fi

# dnl Dump a summary of configure process
echo ""
echo "------------------------------------------------"
echo " Configure Summary"
echo "------------------------------------------------"
echo " Dependencies:"
if test x$systemc = xtrue
then
if test "$SYSTEMC_FOUND" == "yes"
then
  echo " + SystemC Path: ${SYSTEMC_PATH}"
  echo " + libsystemc.a found"
else
  echo " - libsystemc.a not found"
fi
else
  echo " + None"
fi
	
echo " Environment Variables:"
if test x$systemc = xtrue
then     
if test "$SCVAR" != ""
then
  echo " + SYSTEMC: $SCVAR"
fi
fi
		
if test "$ISSVAR" != ""
then 
  echo " + PRET_ISS: $ISSVAR"
fi
echo " Targets:"
# Hack for MacOSX
if test "$UNAME_MAC" != "Darwin" 
then
  echo " + Architecture: ${TARGET_ARCH}"
  echo " + Directory   : ${prefix}"
else
  echo " + Architecture: ${UNAME_MAC}"
  echo " + Emulated    : ${TARGET_ARCH}"
  echo " + Director    : ${prefix}"
fi
echo " Extra Programs:"
if test x$debugger = xtrue 
then
  echo " + Debugger: Yes"
else
  echo " + Debugger: No "
fi
echo " Compile options:"
if test x$fpic = xtrue
then
   echo " + Position independent code (-fPIC): Yes"
else
   echo " + Position independent code (-fPIC): No"
fi	
echo "------------------------------------------------"


